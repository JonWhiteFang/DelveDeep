name: DelveDeep Automated Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  UE_VERSION: '5.6'
  PROJECT_NAME: 'DelveDeep'

jobs:
  test:
    name: Run Automated Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        test-suite: [unit, integration, performance]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: recursive

      - name: Setup Unreal Engine (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Setting up Unreal Engine ${{ env.UE_VERSION }} on Windows"
          # Add your UE installation path
          echo "UE_ROOT=C:\UnrealEngine" >> $GITHUB_ENV

      - name: Setup Unreal Engine (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "Setting up Unreal Engine ${{ env.UE_VERSION }} on Linux"
          # Add your UE installation path
          echo "UE_ROOT=/opt/UnrealEngine" >> $GITHUB_ENV

      - name: Build Project
        run: |
          echo "Building ${{ env.PROJECT_NAME }} project..."
          # Windows: ${{ env.UE_ROOT }}\Engine\Build\BatchFiles\Build.bat
          # Linux: ${{ env.UE_ROOT }}/Engine/Build/BatchFiles/Linux/Build.sh

      - name: Run Unit Tests
        if: matrix.test-suite == 'unit'
        run: |
          echo "Running unit tests..."
          ./RunTests.sh --filter=Product --output=TestResults/unit
        shell: bash

      - name: Run Integration Tests
        if: matrix.test-suite == 'integration'
        run: |
          echo "Running integration tests..."
          ./RunTests.sh --filter=Integration --output=TestResults/integration
        shell: bash

      - name: Run Performance Tests
        if: matrix.test-suite == 'performance'
        run: |
          echo "Running performance tests..."
          ./RunTests.sh --filter=Perf --output=TestResults/performance
        shell: bash

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.test-suite }}
          path: TestResults/
          retention-days: 30

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.os }}-${{ matrix.test-suite }}
          path: |
            TestResults/**/*.html
            TestResults/**/*.xml
            TestResults/**/*.json
          retention-days: 30

      - name: Publish Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: TestResults/**/*.xml
          check_name: Test Results (${{ matrix.os }} - ${{ matrix.test-suite }})

      - name: Comment PR with Test Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const testResults = fs.readFileSync('TestResults/summary.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Test Results (${{ matrix.os }} - ${{ matrix.test-suite }})\n\n\`\`\`\n${testResults}\n\`\`\``
            });

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: TestResults/

      - name: Generate Coverage Report
        run: |
          echo "Generating code coverage report..."
          # Process coverage data from test results

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: TestResults/coverage.xml
          flags: unittests
          name: codecov-delvedeep

      - name: Comment PR with Coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('TestResults/coverage-summary.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Code Coverage\n\n\`\`\`\n${coverage}\n\`\`\``
            });

  report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download All Test Results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: TestResults/

      - name: Generate Consolidated Report
        run: |
          echo "Generating consolidated test report..."
          # Combine all test results into single report

      - name: Upload Consolidated Report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-test-report
          path: TestResults/consolidated-report.html
          retention-days: 90

      - name: Deploy Report to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./TestResults
          destination_dir: test-reports/${{ github.run_number }}
